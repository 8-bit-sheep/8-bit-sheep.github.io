{"version":3,"file":"cljs_http.core.js","sources":["cljs_http/core.cljs"],"mappings":"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","names":["jsonp","goog/net.Jsonp","cljs-http.util/build-url","request","callback-name","request-method","headers","body","with-credentials?","cancel","progress","cljs.core/not","xhr","cljs.core.async/close!","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","channel","response","cljs-http.core/error-kw","target","cljs.core/keys","cljs.core/zipmap","cljs-http.util/camelize","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","formatted-h","G__26163","cljs-http.core/apply-default-headers!","G__26158","timeout","goog.net.XhrIo/ResponseType.BLOB","request-url","cljs-http.core/xhr","method","cljs.core/name","or__3936__auto__","cljs-http.core/apply-response-type!","response-type","goog.net.EventType/DOWNLOAD_PROGRESS","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","listener","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs-http.core/pending-requests","cljs.core/dissoc","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","direction","evt","cljs-http.core/aborted?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","req","goog.net.XhrIo/ResponseType.DOCUMENT","keywordize-keys?","c__25484__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25485__auto__","switch__25439__auto__","state_26174","state_val_26175","cljs.core.async.impl.ioc-helpers/take!","inst_26165","inst_26166","inst_26167","statearr-26176","statearr-26177","statearr-26178","inst_26169","statearr-26179","statearr-26180","inst_26172","cljs.core.async.impl.ioc-helpers/return-chan","statearr-26181","state-machine__25440__auto__","ret-value__25441__auto__","result__25442__auto__","cljs.core/keyword-identical?","e26182","js/Object","ex__25443__auto__","statearr-26183","cljs.core.async.impl.ioc-helpers/process-exception","state__25486__auto__","statearr-26184","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","send-credentials","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog/net.ErrorCode.ABORT","p__26212","map__26213","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs-http.core/request","goog.net.XhrIo/ResponseType.TEXT","G__26162","goog.net.XhrIo/ResponseType.DEFAULT","p__26150","vec__26151","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.dorun.cljs$core$IFn$_invoke$arity$1","goog.net.EventType/UPLOAD_PROGRESS","cljs-http.core/jsonp","default-headers","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","data","state_26201","state_val_26202","inst_26198","inst_26199","statearr-26203","statearr-26204","e26205","statearr-26206","statearr-26207","temp__5457__auto__","fexpr__26149","cljs.core/deref","p__26155","map__26156","cljs-http.core/build-xhr","cljs-http.util/build-headers","goog.net.EventType/COMPLETE","goog.net.XhrIo/ResponseType.ARRAY_BUFFER","cljs-http.util/parse-headers","cljs-http.core/abort!","goog/net.XhrIo","p__26194","map__26195","cljs.core.get.cljs$core$IFn$_invoke$arity$3","p__26159","map__26160","G__26154","js/Error","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns cljs-http.core\n  (:import [goog.net EventType ErrorCode XhrIo]\n           [goog.net Jsonp])\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.util :as util]\n            [cljs.core.async :as async]\n            [clojure.string :as s]))\n\n(def pending-requests (atom {}))\n\n(defn abort!\n  \"Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated.\"\n  [channel]\n  (when-let [req (@pending-requests channel)]\n    (swap! pending-requests dissoc channel)\n    (async/close! channel)\n    (if (.hasOwnProperty req \"abort\")\n      (.abort req)\n      (.cancel (:jsonp req) (:request req)))))\n\n(defn- aborted? [xhr]\n  (= (.getLastErrorCode xhr) goog.net.ErrorCode.ABORT))\n\n(defn apply-default-headers!\n  \"Takes an XhrIo object and applies the default-headers to it.\"\n  [xhr headers]\n  (let [formatted-h (zipmap (map util/camelize (keys headers)) (vals headers))]\n    (dorun\n      (map (fn [[k v]]\n             (.set (.-headers xhr) k v))\n           formatted-h))))\n\n(defn apply-response-type!\n  \"Takes an XhrIo object and sets response-type if not nil.\"\n  [xhr response-type]\n  (.setResponseType xhr\n   (case response-type\n     :array-buffer XhrIo.ResponseType.ARRAY_BUFFER\n     :blob XhrIo.ResponseType.BLOB\n     :document XhrIo.ResponseType.DOCUMENT\n     :text XhrIo.ResponseType.TEXT\n     :default XhrIo.ResponseType.DEFAULT\n     nil XhrIo.ResponseType.DEFAULT)))\n\n(defn build-xhr\n  \"Builds an XhrIo object from the request parameters.\"\n  [{:keys [with-credentials? default-headers response-type] :as request}]\n  (let [timeout (or (:timeout request) 0)\n        send-credentials (if (nil? with-credentials?)\n                           true\n                           with-credentials?)]\n    (doto (XhrIo.)\n          (apply-default-headers! default-headers)\n          (apply-response-type! response-type)\n          (.setTimeoutInterval timeout)\n          (.setWithCredentials send-credentials))))\n\n;; goog.net.ErrorCode constants to CLJS keywords\n(def error-kw\n  {0 :no-error\n   1 :access-denied\n   2 :file-not-found\n   3 :ff-silent-error\n   4 :custom-error\n   5 :exception\n   6 :http-error\n   7 :abort\n   8 :timeout\n   9 :offline})\n\n(defn xhr\n  \"Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [request-method headers body with-credentials? cancel progress] :as request}]\n  (let [channel (async/chan)\n        request-url (util/build-url request)\n        method (name (or request-method :get))\n        headers (util/build-headers headers)\n        xhr (build-xhr request)]\n    (swap! pending-requests assoc channel xhr)\n    (.listen xhr EventType.COMPLETE\n             (fn [evt]\n               (let [target (.-target evt)\n                     response {:status (.getStatus target)\n                               :success (.isSuccess target)\n                               :body (.getResponse target)\n                               :headers (util/parse-headers (.getAllResponseHeaders target))\n                               :trace-redirects [request-url (.getLastUri target)]\n                               :error-code (error-kw (.getLastErrorCode target))\n                               :error-text (.getLastError target)}]\n                 (if-not (aborted? xhr)\n                   (async/put! channel response))\n                 (swap! pending-requests dissoc channel)\n                 (if cancel (async/close! cancel))\n                 (async/close! channel))))\n\n    (when progress\n      (let [listener (fn [direction evt]\n                       (async/put! progress (merge {:direction direction :loaded (.-loaded evt)}\n                                                   (if (.-lengthComputable evt) {:total (.-total evt)}))))]\n        (doto xhr\n          (.setProgressEventsEnabled true)\n          (.listen EventType.UPLOAD_PROGRESS (partial listener :upload))\n          (.listen EventType.DOWNLOAD_PROGRESS (partial listener :download)))))\n\n    (.send xhr request-url method body headers)\n    (if cancel\n      (go\n        (let [v (async/<! cancel)]\n          (if (not (.isComplete xhr))\n            (.abort xhr)))))\n    channel))\n\n(defn jsonp\n  \"Execute the JSONP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [timeout callback-name cancel keywordize-keys?]\n    :or {keywordize-keys? true}\n    :as request}]\n  (let [channel (async/chan)\n        jsonp (Jsonp. (util/build-url request) callback-name)]\n    (.setRequestTimeout jsonp timeout)\n    (let [req (.send jsonp nil\n                     (fn success-callback [data]\n                       (let [response {:status 200\n                                       :success true\n                                       :body (js->clj data :keywordize-keys keywordize-keys?)}]\n                         (async/put! channel response)\n                         (swap! pending-requests dissoc channel)\n                         (if cancel (async/close! cancel))\n                         (async/close! channel)))\n                     (fn error-callback []\n                         (swap! pending-requests dissoc channel)\n                         (if cancel (async/close! cancel))\n                         (async/close! channel)))]\n      (swap! pending-requests assoc channel {:jsonp jsonp :request req})\n      (if cancel\n        (go\n          (let [v (async/<! cancel)]\n            (.cancel jsonp req)))))\n    channel))\n\n(defn request\n  \"Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [request-method] :as request}]\n  (if (= request-method :jsonp)\n    (jsonp request)\n    (xhr request)))\n"]}