{"version":3,"file":"vision_survey_8bs.core.js","sources":["vision_survey_8bs/core.cljs"],"mappings":"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","names":["vision-survey-8bs.core/data","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/vals","cemerick.url.url.cljs$core$IFn$_invoke$arity$1","js/window","x__4027__auto__","y__4028__auto__","vision-survey-8bs.core/texts","vision-survey-8bs.core/window-resize-handler","event","w","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","vision-survey-8bs.core/make-remote-call","endpoint","c__25484__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25485__auto__","switch__25439__auto__","state_26668","state_val_26669","inst_26659","inst_26660","inst_26661","cljs.core/PersistentHashMap","inst_26662","cljs.core.async.impl.ioc-helpers/take!","inst_26664","inst_26665","inst_26666","cljs.core.async.impl.ioc-helpers/return-chan","statearr-26670","state-machine__25440__auto__","ret-value__25441__auto__","result__25442__auto__","cljs.core/keyword-identical?","e26671","js/Object","ex__25443__auto__","statearr-26672","cljs.core.async.impl.ioc-helpers/process-exception","state__25486__auto__","statearr-26673","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic","js/console.log","vision-survey-8bs.core/submitted?","k","x","vision-survey-8bs.core/validate-submission","cljs.core/deref","submission","p1__26676#","p2__26677#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","and__3925__auto__","p1__26678#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","vision-survey-8bs.core/format-entry","entry","vec__26679","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__26682","vec__26685","vec__26688","vec__26691","t1v1","t1v2","t1v3","t2v1","t2v2","t2v3","t3v1","t3v2","t3v3","t4v1","t4v2","t4v3","t5v1","t5v2","t5v3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","vision-survey-8bs.core/submit","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","vision-survey-8bs.core/tri-height","size","G__26694","Math/sqrt","vision-survey-8bs.core/tri-path-values","tx","ty","lx","ly","rx","ry","vision-survey-8bs.core/tri-element-size","Math/round","G__26695","Math/ceil","/95","vision-survey-8bs.core/tri-path-string","coll","svg-path","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","p__26696","vec__26697","vision-survey-8bs.core/get-slope-intercept","x1","y1","x2","y2","m","b","p__26700","p__26701","vec__26702","vec__26705","vision-survey-8bs.core/move-inside","y","vec__26708","vec__26711","m1","b1","m2","b2","boundry-x1","boundry-x2","new-x","new-y","vision-survey-8bs.core/abs","n","x__4024__auto__","y__4025__auto__","p__26714","vec__26715","vision-survey-8bs.core/distance","G__26718","p__26719","vec__26720","vision-survey-8bs.core/get-distances","pos","vec__26723","vec__26726","vec__26729","m3","b3","vision-survey-8bs.core/position","e","rect","vision-survey-8bs.core/update-point","data","triad-values","triad","vision-survey-8bs.core/micronarrative-element","p__26732","p__26733","vec__26734","vec__26737","vision-survey-8bs.core/build-triangle","triad-left","triad-top","triad-right","visible","attrs","vec__26740","_","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/merge","vision-survey-8bs.core/triad-element","app-state","analyze","triad-concepts","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","vision-survey-8bs.core/respondent-element","vision-survey-8bs.core/utopia-element","vision-survey-8bs.core/dystopia-element","vision-survey-8bs.core/january-element","vision-survey-8bs.core/render-years-list","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","cljs.core/second","p1__26743#","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.range.cljs$core$IFn$_invoke$arity$3","vision-survey-8bs.core/birth-year-element","vision-survey-8bs.core/gender-element","vision-survey-8bs.core/validation-error-element","vision-survey-8bs.core/submit-button","vision-survey-8bs.core/thank-you-element","vision-survey-8bs.core/quest?","vision-survey-8bs.core/show-questionnaire?","vision-survey-8bs.core/show-service","s","vision-survey-8bs.core/page","free-form.core/form","keys","value","p1__26744#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","cljs.core/identity","vision-survey-8bs.core/start","G__26745","G__26746","reagent.core/render-component","js/document","vision-survey-8bs.core/init","vision-survey-8bs.core/stop"],"sourcesContent":["(ns vision-survey-8bs.core\n  (:require [reagent.core :as reagent :refer [atom]]\n            [free-form.core :as free-form]\n            [free-form.bootstrap-3]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [cemerick.url :refer [url url-encode]])\n  \n  (:require-macros [cljs.core.async.macros :refer [go]]\n                   ))\n\n\n(def data\n  (atom {:service           (vals (:query (url (-> js/window .-location .-href))))\n         :submitted         false\n         :tri-element-width (min 250 (int (/ (.-innerWidth js/window) 3)))}))\n\n\n(def texts\n  {\n   :triad-concepts1           [\"Mmm, Life Style Biz...\" \"Moonshots!\" \"Exiiiiiit!!!\"]\n   :triad-concepts2           [\"Chill, man, chill...\" \"Dent in the Universe!\" \"Feel The Baa, Luke!\"]\n   :triad-concepts3           [\"It's the Product!\" \"It's the Exit, stupid!\" \"It's Consulting FFS\"]\n   :triad-concepts4           [\"Syncronized Swimming\" \"Basketball / Miles Davis\" \"Relay Race\"]\n   :triad-concepts5           [\"Highly Organized\" \"Creative as Hell\" \"Altruistic and Awesome\"]\n   :main-header               \"Vision Survey\"\n   :service                   \"Company:\"\n   :analyze1                  \"Please pick a position in the triads. Balance the trade-offs regarding the concepts.\"\n   :respondent-label          \"Whats your name?\"\n   :respondent-placeholder    \"Respondent name\"\n   :utopia                    \"Keeping in mind your choises above, write a short utopic story about 8-bit-sheep in five years. When your wildest dreams came true. What happened? How does 8-bit-sheep look then? (no more than 250 words)\"\n   :dystopia                  \"Write a short dystopia about 8-bit-sheep in five years. We're effed. What happened? What went wrong from your perspective? (No more than 250 words)\"\n   :january                   \"Describe a typical day at work in January 2019 as you imagine it today! (No more than 250 words)\"\n   :send-label                \"Send\"\n   :thank-you                 \"Thank you!!\"\n   :validation-error          \"Please reply to all questions that have been marked with an asterix!\"\n   :placeholder-service       \"8-bit-sheep\"})\n\n\n(defn window-resize-handler\n\"Updating width in order to enable responsivity of the triangle\"\n  [event]\n  (let [w (min  250 (int (/ (.-innerWidth js/window) 3)))]\n    (swap! data assoc :tri-element-width w)))\n\n\n(defn make-remote-call [endpoint]\n  (go (let [response (<! (http/get endpoint {:with-credentials? false}))]\n        (js/console.log (:body response)))))\n\n\n(defn submitted?\n  \"Helper function for validation function.\n  False if a field is empty\"\n  [k x]\n  (not (nil? (k x))))\n\n\n(defn validate-submission\n  \"Simple validation to allow posting an entry,\n  goes through all required fields\"\n  []\n  (let [submission @data]\n    (reduce #(and %1 %2)\n            (map #(submitted? %1 submission)\n                 [:triad-values1\n                  :triad-values2\n                  :triad-values3\n                  :triad-values4\n                  :triad-values5\n                  :utopia\n                  :dystopia\n                  :january\n                  :respondent]))\n    \n    \n    ))\n\n\n(defn format-entry [entry]\n  (let [[t1v1 t1v2 t1v3] (:triad-values1 entry)\n        [t2v1 t2v2 t2v3] (:triad-values2 entry)\n        [t3v1 t3v2 t3v3] (:triad-values3 entry)\n        [t4v1 t4v2 t4v3] (:triad-values4 entry)\n        [t5v1 t5v2 t5v3] (:triad-values5 entry)\n        ]\n    (assoc entry\n           :triad1value1 t1v1\n           :triad1value2 t1v2\n           :triad1value3 t1v3\n           :triad2value1 t2v1\n           :triad2value2 t2v2\n           :triad2value3 t2v3\n           :triad3value1 t3v1\n           :triad3value2 t3v2\n           :triad3value3 t3v3\n           :triad4value1 t4v1\n           :triad4value2 t4v2\n           :triad4value3 t4v3\n           :triad5value1 t5v1\n           :triad5value2 t5v2\n           :triad5value3 t5v3)))\n\n\n\n(defn submit\n  \"Data collected 'serverless', submits to Google Docs\"\n  [entry]\n  (cond\n    (validate-submission)\n    (do\n      (make-remote-call\n       (str (assoc\n             (url \"https://script.google.com/macros/s/AKfycbyKllDV1vZ2Uo6m1AsFm544AiNRQVsPD-Cxh6r0StFhUXojtBlT/exec\")\n             :query (format-entry entry))))\n      (swap! data assoc :submitted true))\n    :else (swap! data assoc :validation-error true)))\n\n\n(defn tri-height\n  \"Helper function to figure out geometrics of the triangle.\n  Calculates the triangle height based on the side length\"\n  [size]\n  (Math/sqrt (- (* size size) (* (/ size 2) (/ size 2)))))\n\n\n(defn tri-path-values\n  \"Needed to build the triangle svg. Generates path coordinates\n  based on triangle size (side lenght)\"\n  [size]\n  (let [tx (* (/ size 2)) \n        ty 0\n        lx (* size 0)\n        ly (tri-height size)\n        rx (* size 1)\n        ry (tri-height size)]\n    [tx ty lx ly rx ry nil]))\n\n\n(defn tri-element-size\n  \"To quantify the triad measurement with respect to\n  the corners. Calculates size for element containing triangle\"\n  [size]\n  {:width (* (Math/round  size) 1)\n   :height (Math/ceil (* size  .95))})\n\n\n(defn tri-path-string\n  \"Generate path string for svg\"\n  [coll]\n  (let [svg-path [\"M\" \" \" \" L\" \" \" \" L\" \" \" \" Z\"]]\n    (apply str (interleave svg-path coll))))\n\n\n(defn get-slope-intercept\n  \"Helper function to calculate distances. Calculates\n  line slope and incercept from two points\n  line: y = mx + b\"\n  [[x1 y1 x2 y2]]\n  (let [m    (/ (- y2 y1) (- x2 x1)) \n        b    (- y1 (* m x1))]\n    [m b]))\n\n\n(defn move-inside\n  \"Moves the point inside triad when user clicks outside\"\n  [[x y] [tx ty lx ly rx ry]]\n  (let  [[m1 b1]    (get-slope-intercept [tx ty lx ly]) \n         [m2 b2]    (get-slope-intercept [tx ty rx ry])\n         boundry-x1 (/ (- y b1) m1)\n         boundry-x2 (/ (- y b2) m2)\n         new-x      (cond\n                      (< x boundry-x1) boundry-x1\n                      (> x boundry-x2) boundry-x2\n                      :else x)\n         new-y      (cond\n                      (< y ty) ty\n                      (> y ry) ry\n                      :else y)] \n    [(int new-x) (int new-y)]))\n\n(defn abs\n  \"Cause i can...\"\n  [n]\n  (max n (- n)))\n\n\n(defn distance\n  \"Calculate point distance from the triad side\n  pos  X Y\n  line y = mx + b\n\n  mx + -1y + b = 0\n  Ax +  By + C = 0\n  \n       |AX + BY + C|\n  d = ---------------\n      sqrt(A^2 + B^2)\"\n\n  [[x y] m b size]\n  (int\n   (* 100\n      (/ (abs      (+ (* m x) (* -1 y) b))\n         (Math/sqrt (+ (* m m) 1))\n         size))))\n\n\n(defn get-distances\n  \"To quantify the three dimensions / corner\n  values within the triad.\"\n  [pos [tx ty lx ly rx ry]]\n  (let [[x y ]  pos\n        [m1 b1] (get-slope-intercept [tx ty lx ly])\n        [m2 b2] (get-slope-intercept [tx ty rx ry])\n        m3      0\n        b3      ly]\n    [(/ (distance pos m1 b1 ly) 1)\n     (/ (distance pos m2 b2 ly) 1)\n     (/ (distance pos m3 b3 ly) 1)]))\n\n\n(defn position\n  \"Mouse position in element to calculate triad point entry\"\n  [e]\n  (let [rect (.getBoundingClientRect (.-target e))]\n    [(- (.-clientX e) (.-left rect))\n     (- (.-clientY e) (.-top rect))]))\n\n\n(defn update-point\n  \"Helper function to update triad values\"\n  [data e size pos triad-values triad]\n  (assoc data\n         pos (move-inside (position e)\n                          (tri-path-values size))\n         triad-values (get-distances (move-inside (position e)\n                                                  (tri-path-values size))\n                                     (tri-path-values size))\n         triad   true))\n\n\n(defn micronarrative-element [k]\n  [:free-form/field {:type        :textarea\n                     :key         k\n                     :label       (k texts)\n                     :placeholder (:micro-placeholder texts)}])\n\n(defn build-triangle [[x y] [triad-left triad-top triad-right] visible size attrs]\n  (let [[tx _ ly _ _ _] (tri-path-values size)]\n    [:div.triangle\n     [:p triad-top]\n\n     [:svg.svg-style\n      (merge-with merge attrs\n                  {:width        (:width (tri-element-size size))\n                   :height       (:height (tri-element-size size))})\n\n      [:path {:d  (tri-path-string (tri-path-values size))}]\n\n      [:g {:opacity (if (true? visible) 100 0)}\n       [:circle {:id \"point1\" :cx x :cy y :r 3}]]]\n     \n     [:div {:style {:clear \"both\"}}\n      \n      [:span {:style {:top       (str ly \"px\")\n                      :left      (str (- tx) \"px\")}}\n       triad-left]\n      \n      [:span {:style {:top      (str ly \"px\")\n                      :left     (str tx \"px\")}}\n       triad-right]]]))\n\n\n(defn triad-element [app-state size analyze\n                     pos triad-concepts triad-values triad]\n  [[:label (analyze texts)]\n   [:div       [build-triangle\n                (pos app-state)\n                triad-concepts\n                (triad app-state)\n                size\n                {:on-click\n                 (fn [e]\n                   (swap! data update-point e size pos triad-values triad))}]]])\n\n\n(defn respondent-element []\n  [:free-form/field {:type        :text\n                     :key         :respondent\n                     :label (:respondent-label texts)\n                     :placeholder (:respondent-placeholder texts)}])\n\n\n(defn utopia-element []\n  [:free-form/field {:type        :textarea\n                     :key         :utopia\n                     :label       (:utopia texts)\n                     :placeholder (:utopia-placeholder texts)}])\n(defn dystopia-element []\n  [:free-form/field {:type        :textarea\n                     :key         :dystopia\n                     :label       (:dystopia texts)\n                     :placeholder (:dystopia texts)}])\n(defn january-element []\n  [:free-form/field {:type        :textarea\n                     :key         :january\n                     :label       (:january texts)\n                     :placeholder (:january-placeholder texts)}])\n\n\n(defn render-years-list []\n  (concat  (list :choose (second (:gender-options texts)))\n           (interleave\n            (map #(keyword (str %)) (range 2015 1900 -1))\n            (map str (range 2015 1900 -1)))))\n\n\n(defn birth-year-element []\n  [:free-form/field {:type  :select\n                     :label (:birthyear-label texts)\n                     :key  :birthyear\n                     :options (render-years-list)}])\n\n\n(defn gender-element []\n  [:free-form/field {:type    :select\n                     :label   (:gender-label texts)\n                     :key     :gender\n                     :options (:gender-options texts)}])\n\n\n(defn validation-error-element [app-state]\n  [:p {:style {:color \"red\"}}\n   (cond\n     (:validation-error app-state) (:validation-error texts)\n     :else \"\")])\n\n\n(defn submit-button [app-state]\n  [:button.btn.btn-primary \n   {:style {:fill \"black\"}\n    :type :button\n    :on-click (fn [e ] (submit app-state))} (:send-label texts)])\n\n\n(defn thank-you-element [app-state]\n  [:div {:style\n         {:display\n          (cond\n            (:submitted app-state) \"block\"\n            :else \"none\")}}\n   [:h3 (:thank-you texts)]])\n\n\n(defn quest?\n  \"Helper function to hide survey\"\n  [app-state]\n  (cond\n    (:submitted app-state) \"none\"\n    :else \"block\"))\n\n(defn show-questionnaire?\n  \"Hide survey when submitted\"\n  [app-state]\n  {:style {:display (quest? app-state)}})\n\n(defn show-service\n  \"Show template service name if no service defined as\n  get element\"\n  [app-state]\n  (let [s (:service app-state)]\n    (cond\n      (not (nil? s)) s\n      :else (:placeholder-service texts))))\n\n\n(defn page []\n  (let [app-state @data\n        size(:tri-element-width app-state)]\n    [:div.container\n     [:h1.main-header\n      (:main-header texts)]\n     [:div.plain-form\n      (show-questionnaire? app-state) \n      [:hr]\n      [:p\n       [:h4 (:service texts)] \n       [:h2 (show-service app-state)]]\n      [:br]\n      \n      [free-form/form app-state (:-errors app-state)\n       (fn [keys value] (swap! data #(assoc-in % keys value))) :bootstrap-3\n       [:form {:noValidate true}\n        ;;[:div.col-sm-offset-2.col-sm-10 {:free-form/error-message {:key :-general}} [:p.text-danger]]\n\n        ;;(micronarrative-element :micronarrative1)\n        \n        \n        \n\n        (map identity (triad-element\n                       app-state\n                       size\n                       :analyze1 :position1\n                       (:triad-concepts1 texts)\n                       :triad-values1 :triad1))\n\n        [:hr]\n\n        (map identity (triad-element\n                       app-state\n                       size\n                       :analyze2 :position2\n                       (:triad-concepts2 texts)\n                       :triad-values2 :triad2))\n        [:hr]\n\n        (map identity (triad-element\n                       app-state\n                       size\n                       :analyze3 :position3\n                       (:triad-concepts3 texts)\n                       :triad-values3 :triad3))\n        [:hr]\n\n        (map identity (triad-element\n                       app-state\n                       size\n                       :analyze4 :position4\n                       (:triad-concepts4 texts)\n                       :triad-values4 :triad4))\n        [:hr]\n\n        (map identity (triad-element\n                       app-state\n                       size\n                       :analyze5 :position5\n                       (:triad-concepts5 texts)\n                       :triad-values5 :triad5))\n        [:hr]\n\n        (utopia-element)\n\n        (dystopia-element)\n\n        (january-element)\n\n        (respondent-element)\n\n        (validation-error-element app-state)\n\n        (submit-button app-state)]]]\n     \n     (thank-you-element app-state)\n\n     [:hr]\n     \n     (comment\n       [:code \"@data:\" app-state])\n     \n     (.addEventListener js/window \"resize\" window-resize-handler)]))\n\n\n\n(defn start []\n  (reagent/render-component [page]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}