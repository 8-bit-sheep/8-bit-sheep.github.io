{"version":3,"file":"shadow.cljs.devtools.client.browser.js","sources":["shadow/cljs/devtools/client/browser.cljs"],"mappings":"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","names":["s","e","callback","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/Date.now","js/console.warn","resource-name","line","column","msg","actions","fn-sym","cljs.core/reset!","shadow.cljs.devtools.client.browser/repl-ns-ref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","repl-state","shadow.cljs.devtools.client.browser.devtools_msg.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.browser/devtools-msg","shadow.cljs.devtools.client.browser/compile","text","shadow.cljs.devtools.client.browser/close-reason-ref","cljs.core/volatile!","temp__5457__auto__","cljs.core/deref","shadow.cljs.devtools.client.browser/socket-ref","shadow.cljs.devtools.client.browser/repl-error","info","sources-to-get","js/WebSocket","ws-url","sources","p__36799","map__36800","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/repl-set-ns","id","ns","shadow.cljs.devtools.client.browser/do-js-requires","js-requires","seq__36659","cljs.core/seq","chunk__36660","count__36661","i__36662","cljs.core/chunked-seq?","c__4338__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","js-ns","shadow.cljs.devtools.client.browser/module-loaded","name","cljs.core/not","cljs.core/some","reload-namespaces","provides","js/SHADOW_ENV.setLoaded","output-name","goog.userAgent.product/CHROME","shadow.cljs.devtools.client.hud/connection-error-clear!","shadow.cljs.devtools.client.env/enabled","content","shadow.cljs.devtools.client.browser/module-is-active?","module","shadow.cljs.devtools.client.browser/do-js-load","cljs.core.into.cljs$core$IFn$_invoke$arity$2","path","shadow.cljs.devtools.client.browser/heartbeat!","cljs.core/vreset!","shadow.cljs.devtools.client.browser/script-eval","require-str","p__36796","map__36797","shadow.cljs.devtools.client.browser/repl-init","or__3936__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/goog-base-rc","resource-id","G__36805","cljs.core/Keyword","type","js/setTimeout","and__3925__auto__","shadow.cljs.devtools.client.browser/src-is-loaded?","src","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.hud/hud-hide","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","res","shadow.cljs.devtools.client.env/set-print-fns!","shadow.cljs.devtools.client.browser/ws-msg","goog.userAgent.product/FIREFOX","shadow.cljs.devtools.client.browser/get-asset-root","G__36677","cljs.core/contains?","reload-info","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.hud/hud-warnings","p__36708","map__36709","js/goog","js/goog.constructNamespace_","js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.browser","js/shadow.cljs.devtools.client.browser.active-modules-ref","shadow.cljs.devtools.client.browser/active-modules-ref","warning","node","js/document.querySelector","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","iter__4311__auto__","s__36690","cljs.core/LazySeq","xs__6012__auto__","map__36695","iterys__4307__auto__","s__36692","c__4309__auto__","size__4310__auto__","b__36694","cljs.core/chunk-buffer","i__36693","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36691","cljs.core/cons","cljs.core/rest","fs__4308__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__36689","warnings","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","goog.userAgent.product/SAFARI","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/server-host","shadow.cljs.devtools.client.env/server-port","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.cljs.devtools.client.browser/load-sources","cljs.core/*print-fn*","loc","cbp","shadow.cljs.devtools.client.browser/handle-asset-watch","print-fn","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","shadow.cljs.devtools.client.env/process-ws-msg","shadow.cljs.devtools.client.browser/handle-message","js/window.addEventListener","shadow.cljs.devtools.client.env/reset-print-fns!","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.browser/get-ua-product","p__36684","map__36685","shadow.cljs.devtools.client.browser/handle-build-complete","seq__36753","chunk__36755","count__36756","i__36757","updates","shadow.cljs.devtools.client.env/ws-url","js/goog.Uri","js/CLOSURE_BASE_PATH","seq__36639","chunk__36640","count__36641","i__36642","map__36643","map__36645","js","js/shadow.cljs.devtools.client.browser.scripts-to-load","shadow.cljs.devtools.client.browser/scripts-to-load","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","map__36687","compiled","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.browser/repl-require","goog.dom/removeNode","result","shadow.cljs.devtools.client.env/repl-call","js/eval","shadow.cljs.devtools.client.browser/ws-connect","socket","G__36759","G__36760","p__36636","map__36637","temp__5455__auto__","shadow.cljs.devtools.client.hud/load-end-success","G__36678","G__36679","G__36680","G__36681","G__36682","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/module-format","js/console.error","p__36750","map__36751","var_args","args__4521__auto__","len__4518__auto__","i__4519__auto__","argseq__4522__auto__","cljs.core/IndexedSeq","seq36631","G__36632","self__4505__auto__","args","shadow.cljs.devtools.client.hud/hud-error","sources-to-load","goog.dom/insertSiblingAfter","new-link","req","p1__36683#","shadow.cljs.devtools.client.browser/do-js-reload","shadow.cljs.devtools.client.hud/load-failure","complete-fn","failure-fn","p__36802","map__36803","js/shadow.cljs.devtools.client.browser.socket-ref","shadow.cljs.devtools.client.browser/goog-is-loaded?","js/document.location.href","clojure.string/ends-with?","shadow.cljs.devtools.client.browser/loaded?","js/goog.isProvided_","p__36790","map__36791","shadow.cljs.devtools.client.hud/connection-error","shadow.cljs.devtools.client.browser/repl-invoke","G__36807","G__36808","G__36809","G__36810","G__36811","js/goog.globalEval","code","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","js/console","shadow.cljs.devtools.client.env/autoload","p__36793","map__36794","p__36705","map__36706","shadow.cljs.devtools.client.hud/load-start","p__36711","map__36712","rc","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","seq__36697","chunk__36698","count__36699","i__36700","map__36701","map__36703","w","js/SHADOW_ENV.isLoaded","p__36787","map__36788","js/shadow.cljs.devtools.client.browser.repl-ns-ref","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","clojure.string/replace","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$4","js/document.createElement","shadow.cljs.devtools.client.env/before-load-src","shadow.cljs.devtools.client.env/files-url","shadow.cljs.devtools.client.env/repl-error","goog.userAgent.product/IE"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.dom :as gdom]\n    [goog.object :as gobj]\n    [goog.net.jsloader :as loader]\n    [goog.userAgent.product :as product]\n    [goog.Uri]\n    [goog.net.XhrIo :as xhr]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.cljs.devtools.client.console]\n    [shadow.cljs.devtools.client.hud :as hud]\n    ))\n\n(defonce active-modules-ref\n  (volatile! #{}))\n\n(defonce repl-ns-ref (atom nil))\n\n(defn module-loaded [name]\n  (vswap! active-modules-ref conj (keyword name)))\n\n(defonce socket-ref (volatile! nil))\n\n(defn devtools-msg [msg & args]\n  (.apply (.-log js/console) nil (into-array (into [(str \"%cshadow-cljs: \" msg) \"color: blue;\"] args))))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(defonce scripts-to-load (atom []))\n\n(def loaded? js/goog.isProvided_)\n\n(defn goog-is-loaded? [name]\n  (js/SHADOW_ENV.isLoaded name))\n\n(def goog-base-rc\n  [:shadow.build.classpath/resource \"goog/base.js\"])\n\n(defn src-is-loaded? [{:keys [resource-id output-name] :as src}]\n  ;; FIXME: don't like this special case handling, but goog/base.js will always be loaded\n  ;; but not as a separate file\n  (or (= goog-base-rc resource-id)\n      (goog-is-loaded? output-name)))\n\n(defn module-is-active? [module]\n  (contains? @active-modules-ref module))\n\n(defn script-eval [code]\n  (js/goog.globalEval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id output-name resource-name js] :as src} sources]\n    ;; should really stop using this and rather maintain our own record\n    ;; but without this hot-reload will reload shadow-js files with each cycle\n    ;; since they don't set it\n    (js/SHADOW_ENV.setLoaded output-name)\n\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn failure-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn\n    failure-fn))\n\n(defn do-js-requires\n  \"when (require '[\\\"some-str\\\" :as x]) is done at the REPL we need to manually call the shadow.js.require for it\n   since the file only adds the shadow$provide. only need to do this for shadow-js.\"\n  [js-requires]\n  (doseq [js-ns js-requires]\n    (let [require-str (str \"var \" js-ns \" = shadow.js.require(\\\"\" js-ns \"\\\");\")]\n      (script-eval require-str))))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn handle-build-complete [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (doseq [{:keys [msg line column resource-name] :as w} warnings]\n      (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg)))\n\n    (if-not env/autoload\n      (hud/load-end-success)\n      ;; load all files for current build:\n      ;; of modules that are active\n      ;; and are either not loaded yet\n      ;; or specifically marked for reload\n      (when (or (empty? warnings) env/ignore-warnings)\n        (let [sources-to-get\n              (->> sources\n                   (filter\n                     (fn [{:keys [module] :as rc}]\n                       (or (= \"js\" env/module-format)\n                           (module-is-active? module))))\n                   ;; don't reload namespaces that have ^:dev/never-reload meta\n                   (remove (fn [{:keys [ns]}]\n                             (contains? (:never-load reload-info) ns)))\n                   (filter\n                     (fn [{:keys [ns resource-id] :as src}]\n                       (or (contains? (:always-load reload-info) ns)\n                           (not (src-is-loaded? src))\n                           (and (contains? compiled resource-id)\n                                ;; never reload files from jar\n                                ;; they can't be hot-swapped so the only way they get re-compiled\n                                ;; is if they have warnings, which we can't to anything about\n                                (not (:from-jar src))))))\n                   (into []))]\n\n          (if-not (seq sources-to-get)\n            (hud/load-end-success)\n            (load-sources sources-to-get #(do-js-reload msg % hud/load-end-success hud/load-failure))\n            ))))))\n\n(defn handle-asset-watch [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (when-let [node (js/document.querySelector (str \"link[href^=\\\"\" path \"\\\"]\"))]\n      (let [new-link\n            (doto (js/document.createElement \"link\")\n              (.setAttribute \"rel\" \"stylesheet\")\n              (.setAttribute \"href\" (str path \"?r=\" (rand))))]\n\n        (devtools-msg \"load CSS\" path)\n        (gdom/insertSiblingAfter new-link node)\n        (gdom/removeNode node)\n        ))))\n\n;; from https://github.com/clojure/clojurescript/blob/master/src/main/cljs/clojure/browser/repl.cljs\n;; I don't want to pull in all its other dependencies just for this function\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn get-asset-root []\n  (let [loc (js/goog.Uri. js/document.location.href)\n        cbp (js/goog.Uri. js/CLOSURE_BASE_PATH)\n        s (.toString (.resolve loc cbp))]\n    ;; FIXME: stacktrace starts with file:/// but resolve returns file:/\n    ;; how does this look on windows?\n    (str/replace s #\"^file:/\" \"file:///\")\n    ))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" e)\n  (-> (env/repl-error e)\n      (assoc :ua-product (get-ua-product)\n             :asset-root (get-asset-root))))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(js/eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload-namespaces js-requires] :as msg}]\n  (let [sources-to-load\n        (->> sources\n             (remove (fn [{:keys [provides] :as src}]\n                       (and (src-is-loaded? src)\n                            (not (some reload-namespaces provides)))))\n             (into []))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (do-js-load sources)\n        (when (seq js-requires)\n          (do-js-requires js-requires))\n        (ws-msg {:type :repl/require-complete :id id})\n        ))))\n\n(defn repl-init [{:keys [repl-state id]}]\n  (reset! repl-ns-ref (get-in repl-state [:current :ns]))\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL init successful\"))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (reset! repl-ns-ref ns)\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n(def close-reason-ref (volatile! nil))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg}]\n  ;; (js/console.log \"ws-msg\" msg)\n  (hud/connection-error-clear!)\n  (case type\n    :asset-watch\n    (handle-asset-watch msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg)\n\n    :build-complete\n    (do (hud/hud-warnings msg)\n        (handle-build-complete msg))\n\n    :build-failure\n    (do (hud/load-end)\n        (hud/hud-error msg))\n\n    :build-init\n    (hud/hud-warnings msg)\n\n    :build-start\n    (do (hud/hud-hide)\n        (hud/load-start))\n\n    :pong\n    nil\n\n    :client/stale\n    (vreset! close-reason-ref \"Stale Client! You are not using the latest compilation output!\")\n\n    :client/no-worker\n    (vreset! close-reason-ref (str \"watch for build \\\"\" env/build-id \"\\\" not running\"))\n\n    ;; default\n    :ignored))\n\n(defn compile [text callback]\n  (xhr/send\n    (str \"http\" (when env/ssl \"s\") \"://\" env/server-host \":\" env/server-port \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n    (fn [res]\n      (this-as ^goog req\n        (let [actions\n              (-> req\n                  (.getResponseText)\n                  (reader/read-string))]\n          (when callback\n            (callback actions)))))\n    \"POST\"\n    (pr-str {:input text})\n    #js {\"content-type\" \"application/edn; charset=utf-8\"}))\n\n(defn heartbeat! []\n  (when-let [s @socket-ref]\n    (.send s (pr-str {:type :ping :v (js/Date.now)}))\n    (js/setTimeout heartbeat! 30000)))\n\n\n(defn ws-connect []\n  (let [print-fn\n        cljs.core/*print-fn*\n\n        ws-url\n        (env/ws-url :browser)\n\n        socket\n        (js/WebSocket. ws-url)]\n\n    (vreset! socket-ref socket)\n\n    (set! (.-onmessage socket)\n      (fn [e]\n        (env/process-ws-msg (. e -data) handle-message)\n        ))\n\n    (set! (.-onopen socket)\n      (fn [e]\n        (hud/connection-error-clear!)\n        (vreset! close-reason-ref nil)\n        ;; :module-format :js already patches provide\n        (when (= \"goog\" env/module-format)\n          ;; patch away the already declared exception\n          (set! (.-provide js/goog) js/goog.constructNamespace_))\n\n        (env/set-print-fns! ws-msg)\n\n        (devtools-msg \"WebSocket connected!\")\n        ))\n\n    (set! (.-onclose socket)\n      (fn [e]\n        ;; not a big fan of reconnecting automatically since a disconnect\n        ;; may signal a change of config, safer to just reload the page\n        (devtools-msg \"WebSocket disconnected!\")\n        (hud/connection-error (or @close-reason-ref \"Connection closed!\"))\n        (vreset! socket-ref nil)\n        (env/reset-print-fns!)\n        ))\n\n    (set! (.-onerror socket)\n      (fn [e]\n        (hud/connection-error \"Connection failed!\")\n        (devtools-msg \"websocket error\" e)))\n\n    (js/setTimeout heartbeat! 30000)\n    ))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n\n  ;; for /browser-repl in case the page is reloaded\n  ;; otherwise the browser seems to still have the websocket open\n  ;; when doing the reload\n  (js/window.addEventListener \"beforeunload\"\n    (fn []\n      (when-let [s @socket-ref]\n        (.close s))))\n\n  (ws-connect))\n"]}