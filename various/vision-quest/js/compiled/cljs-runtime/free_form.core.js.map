{"version":3,"file":"free_form.core.js","sources":["free_form/core.cljs"],"mappings":"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","names":["cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","node","free-form.util/attributes-index","free-form.core/error-messages?","cljs.core/not","free-form.core/error-class?","cljs.core/contains?","cljs.core/second","attrs","cljs.core.get.cljs$core$IFn$_invoke$arity$2","target","event","cljs.core/coll?","p1__25926#","clojure.walk/postwalk","free-form.core/bind-error-class","errors","p1__25927#","free-form.core/bind-error-messages","free-form.core/warn-of-leftovers","on-change-fn","G__25829","G__25830","on-change","keys","p1__25811#","free-form.core/extract-event-value","p1__25921#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/some","cljs.core/namespace","free_form.core.first_non_nil.cljs$core$IFn$_invoke$arity$variadic","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","values","free-form-attributes","extensions","html","var_args","G__25932","free-form.core/form","js/Error","fexpr__25942","p1__25930#","p2__25929#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","free-form.extension/extension","inner-fn","free-form.core/input?","G__25839","G__25778","args__4521__auto__","len__4518__auto__","i__4519__auto__","argseq__4522__auto__","cljs.core/IndexedSeq","free-form.core/first-non-nil","seq25787","self__4506__auto__","cljs.core/seq","coll","cljs.core/first","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","cljs.core/nil?","value-on","or__3936__auto__","G__25831","cljs.core/Keyword","attributes","re-attributes","js/console.error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p1__25925#","free-form.core/bind-input","value","G__25833","free-form.core/js-event-value","vec__25897","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","free-form.core/extract-attributes","p1__25928#","p1__25891#","cljs.core/not-any?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","input-errors","p1__25914#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/sequential?","p1__25892#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","key","p1__25814#","error-on","extra-error-keys","and__3925__auto__","vec__25916","_","cljs.core/boolean?","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","temp__5455__auto__","cljs.core/map?","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","vec__25815","map__25818","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","free_form.core.form.cljs$core$IFn$_invoke$arity$5"],"sourcesContent":[";;;; Copyright \u00a9 2015-2017 Jos\u00e9 Pablo Fern\u00e1ndez Silva\n\n(ns free-form.core\n  (:require clojure.string\n            [clojure.walk :refer [postwalk prewalk]]\n            [free-form.extension :as extension]\n            [free-form.util :refer [field? key->keys attributes-index]]))\n\n(defn- extract-attributes [node key]\n  (let [attributes    (get node attributes-index)\n        re-attributes (key attributes)\n        attributes    (dissoc attributes key)\n        keys          (or (:keys re-attributes) [(:key re-attributes)])]\n    [attributes re-attributes keys]))\n\n(defn- input? [node]\n  (and (coll? node)\n       (contains? (second node) :free-form/input)))\n\n(defn- js-event-value [event]\n  (let [target (.-target event)]\n    (case (.-type target)\n      \"checkbox\" (.-checked target)\n      (.-value target))))\n\n(defn- extract-event-value [event]\n  (if (or (boolean? event)\n          (string? event))\n    event                                                                                                               ; React-toolbox generates events that already contain a stracted string of the value as the first paramenter\n    (js-event-value event)))                                                                                            ; for all other cases, we extract it ourselves.\n\n(defn- first-non-nil [& coll]\n  (first (filter (complement nil?) coll)))\n\n(defn- bind-input [values errors on-change node]\n  (if (not (input? node))\n    node\n    (let [[attributes free-form-attributes keys] (extract-attributes node :free-form/input)\n          {:keys [value-on error-on extra-error-keys]} free-form-attributes\n          on-change-fn #(on-change keys (extract-event-value %1))\n          value-on     (or value-on (case (:type attributes)\n                                      (:checkbox :radio) :default-checked\n                                      :value))\n          value        (case (:type attributes)\n                         :checkbox (= true (get-in values keys))\n                         :radio (= (:value attributes) (get-in values keys))\n                         (first-non-nil (get-in values keys) (:blank-value free-form-attributes) \"\"))\n          input-errors (get-in errors keys)]\n      (assoc node attributes-index\n                  (cond-> attributes\n                          true (assoc :on-change on-change-fn)\n                          true (assoc value-on value)\n                          (and error-on input-errors) (assoc error-on (clojure.string/join \" \" input-errors))\n                          (and extra-error-keys (some #(get-in errors %) extra-error-keys)) (assoc error-on \" \"))))))\n\n(defn- error-class?\n  \"Tests whether the node should be marked with an error class should the field have an associated error.\"\n  [node]\n  (and (coll? node)\n       (contains? (second node) :free-form/error-class)))\n\n(defn- bind-error-class [errors node]\n  (if (not (error-class? node))\n    node\n    (let [[attributes re-attributes keys] (extract-attributes node :free-form/error-class)]\n      (assoc node attributes-index\n                  (if (not-any? #(get-in errors %) (conj (:extra-keys re-attributes) keys))\n                    attributes\n                    (update attributes :class #(str (or (:error re-attributes) \"error\") %)))))))\n\n(defn- error-messages?\n  [node]\n  (and (coll? node)\n       (contains? (second node) :free-form/error-message)))\n\n(defn- bind-error-messages [errors node]\n  (if (not (error-messages? node))\n    node\n    (let [[attributes _ keys] (extract-attributes node :free-form/error-message)]\n      (if-let [errors (get-in errors keys)]\n        (vec (concat\n              (drop-last (assoc node attributes-index attributes))\n              (map #(conj (get node 2) %) errors)))\n        nil))))\n\n(defn- warn-of-leftovers [node]\n  (let [attrs (get node attributes-index)]\n    (when (and (map? attrs)\n               (some #(= \"free-form\" (namespace %)) (keys attrs)))\n      (js/console.error \"There are free-form-looking leftovers on\" (pr-str node))))\n  node)\n\n(defn form\n  ([values errors on-change html]\n   (form values errors on-change [] html))\n  ([values errors on-change extensions html]\n   (let [errors     (or errors {})\n         extensions (if (sequential? extensions) extensions [extensions])\n         inner-fn   (fn [html]\n                      (->> html\n                           (postwalk #(bind-input values errors on-change %))\n                           (postwalk #(bind-error-class errors %))\n                           (postwalk #(bind-error-messages errors %))))]\n     (postwalk #(warn-of-leftovers %)\n               ((reduce #(extension/extension %2 %1) inner-fn extensions) html)))))\n"]}