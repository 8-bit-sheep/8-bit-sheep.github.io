{"version":3,"file":"cljs.tools.reader.impl.inspect.js","sources":["cljs/tools/reader/impl/inspect.cljs"],"mappings":";;AAYA,mDAAA,nDAAOG,8GAAcC,SAASC,IAAI8C,MAAMC,jIAFxC,AAAA;AAGE,IAAMnC,IAAE,AAACU,gBAAMtB,xBADjB;IAEQgB,IAAE,4BAAA,VAAIjB,cAAW,iBAAAwC,kBAAA;IAAAC,kBAAQ5B;AAAR,AAAA,SAAA2B,kBAAAC,mBAAAD,kBAAAC;;8JACqB,+CAAQxC,lGAAvBE,hDAAT,6FAAA,zIAAL,4CAAMY,mGAAwBJ,/IAA7BK,4LAAkCC,vMAA5CC;IACAoC,UAAQ,AAAC7C,8CAAM8C,cAAI,kDAAA,lDAACC,sDAActC;IAClCtB,SAAO,WAAA,MAAA,fAAI,CAAGqB,IAAEJ;AAJtB,AAKE,oDAAKkC,mDAAMO,qDAAQ1D,oDAAOoD;;AAE9B,kDAAA,lDAAO1C,4GACJc,EAAEf;AADL,AAEE,GACC,MAAA,LAAMA;AADP;;GAEC,OAASA,VAFV;AAAA;;AAAA,GAGC,cAAAwC,bAAUxC;AAHX;;AAAA,GAIC,OAASA;AAJV;;GAKC,cAAAE,bAASF,JALV;AAAA;;AAAA,GAMC,AAACsC,wBAAQtC;AANV;;AAAA,GAOC,AAACqC,sBAAMrC;AAPR;;AAAA,GAQC,AAACoD,qBAAKpD;AARP;;GASC,AAACgB,qBAAKhB,xBATP;AAAA;;GAUC,+CAAA,/CAACiB,6CAAEjB,hDAVJ;AAAA;;GAWC,+CAAA,/CAACiB,6CAAEjB,hDAXJ;AAAA;;AAAA,AAYU,OAACyC,eAAKzC;;;;;;;;;;;;;;AAElB,GAAA,QAAAmB,iCAAAC,uCAAAC,8CAAAC,mDAAAC,2DAAAC;AAAA;AAAA,AAAA,+CAAA,iBAAAC,6BAAA,AAAAC,6CAAA,1IAAU5B;IAAV6B,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,AAAAC;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,iCAAA,4DAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,rNAAmB5B;;;AAEnB,AAAAJ,sBAAAC,6CAAA,0DAAA,WAA6BH,SAAiBK;AAC5C,IAAMQ,IAAE,4BAAA,IAAA,dAAIb,1BADd;IAEQJ,SAAO,kBAAA,QAAA,xBAAI,CAAG,AAAUS,WAAGQ;AADjC,AAEE,oDAAA,kDAEE,YAAA,ZAAoBR,gBAAI,iBAAAmC,kBAAK3B;IAAL4B,kBAAO,AAAUpC;AAAjB,AAAA,SAAAmC,kBAAAC,mBAAAD,kBAAAC;mDACxB7C;;AAEN,AAAAM,sBAAAC,6CAAA,2DAAA,WAA8BH,SAASK;AAAvC,AAA0C,oDAAKA;;AAE/C,AAAAH,sBAAAC,kEAAA,rBAAoBgB,gCAAsBnB,SAASK;AAAnD,AAAA;;AAGA,AAAAH,sBAAAC,6EAAA,hCAAoByC,2CAAiC5C,SAASK;AAA9D,AAAA;;AAGA,AAAAH,sBAAAC,+DAAA,lBAAoBW,6BAAmBd,SAASK;AAAhD,AAAA;;AAGA,AAAAH,sBAAAC,4DAAA,fAAoBkD,0BAAgBrD,SAASK;AAA7C,AAAA;;AAEA,AAAAH,sBAAAC,+DAAA,lBAAoBC,6BAAmBJ,SAASK;AAAhD,AAAA;;AAEA,AAAAH,sBAAAC,6CAAA,iDAAA,WAA0BiB,EAAEA;AAA5B,AAAA;;AAEA,AAAAlB,sBAAAC,6CAAA,oDAAA,WAA2BH,SAASC;AAClC,qEAAA,IAAA,lEAACF,iDAAaC,SAASC,jEADzB;;AAGA,AAAAC,sBAAAC,6CAAA,mDAAA,WAA0BH,SAASY;AAAnC,AACE,IAAMf,MAAI,AAAC0B,gBAAMX;IACXd,UAAQ,4BAAA,VAAIE,cAAWH;IACvBW,WAAS,AAACC,8CAAMC,iBAAO,AAACC,6CAAKb,QAAQc;IACrChB,SAAO,mBAAA,OAAA,xBAAI,CAAGC,MAAIC;AAHxB,AAIE,0EAAA,nEAACC,iDAAaC,SAASQ,aAAYZ;;AAEvC,AAAAM,sBAAAC,6CAAA,kDAAA,WAA0BH,SAASC;AACjC,qEAAA,KAAA,nEAACF,iDAAaC,SAASC,jEADzB;;AAGA,AAAAC,sBAAAC,6CAAA,yDAAA,WAA6BH,SAASC;AACpC,qEAAA,IAAA,lEAACF,iDAAaC,SAASC,jEADzB;;AAGA,AAAAC,sBAAAC,6CAAA,4DAAA,WAA8BH,SAASK;AAAvC,AACE,OAACqD,wGAAO,AAACZ,eAAKzC;;AAEhB,AAAA;;;;;;;yCAAA,iDAAA4C,1FAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;kFAMI/C,lFANJ,AAAA,uEAAA,vEAAM8C;AAMC,gKAAA,kEAAA,1NAAChD,6EAAAA,sFAAAA,LAAeE,kEAAAA,xOANvB;;;kFAOIL,SAASK,3FAPb,AAAA,uEAAA,vEAAM8C;AAOU,QAAChD,6EAAAA,yFAAAA,dAASH,qEAAAA,5DAASK,qEAAAA,9OAPnC;;;AAAA,AAAA,iEAAA,jEAAM8C;;AAAN","names":["suffix","len","n-shown","cljs.tools.reader.impl.inspect/inspect*-col","truncate","col","cljs.core/-add-method","cljs.tools.reader.impl.inspect/inspect*","cljs.core/LazySeq","x","cljs.tools.reader.impl.inspect/dispatch-inspect","cljs.core/Symbol","contents","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","cljs.core.take.cljs$core$IFn$_invoke$arity$2","m","n","cljs.core/NodeSeq","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","l","elements","cljs.core/IndexedSeq","_","cljs.core/set?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","js/cljs","js/cljs.tools","js/cljs.tools.reader","js/cljs.tools.reader.impl","js/cljs.tools.reader.impl.inspect","js/cljs.tools.reader.impl.inspect.inspect*","method-table__4401__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4402__auto__","method-cache__4403__auto__","cached-hierarchy__4404__auto__","hierarchy__4405__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","x__4027__auto__","y__4028__auto__","cljs.core/list?","cljs.core/vector?","cljs.core/PersistentArrayMapSeq","cljs.core/Keyword","cljs.core/type","start","end","var_args","G__29910","cljs.tools.reader.impl.inspect/inspect","js/Error","cljs.core/Cons","content","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core/map?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":[";;   Copyright (c) Russ Olsen, Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.inspect)\n\n(declare inspect*)\n\n(defn- inspect*-col [truncate col start end]\n  (let [n (count col)\n        l (if truncate 0 (min 10 n))\n        elements (map (partial inspect* true) (take l col))\n        content (apply str (interpose \" \" elements))\n        suffix (if (< l n) \"...\")]\n    (str start content suffix end)))\n\n(defn- dispatch-inspect\n  [_ x]\n  (cond\n   (nil? x) :nil\n   (string? x) :string\n   (keyword? x) :strable\n   (number? x) :strable\n   (symbol? x) :strable\n   (vector? x) :vector\n   (list? x)  :list\n   (map? x) :map\n   (set? x) :set\n   (= x true) :strable\n   (= x false) :strable\n   :default (type x)))\n\n(defmulti inspect* dispatch-inspect)\n\n(defmethod inspect* :string [truncate ^String x]\n  (let [n (if truncate 5 20)\n        suffix (if (> (.-length x) n) \"...\\\"\" \"\\\"\")]\n    (str\n      \\\"\n      (.substring ^String x 0 (min n (.-length x)))\n      suffix)))\n\n(defmethod inspect* :strable [truncate x] (str x))\n\n(defmethod inspect* cljs.core/IndexedSeq [truncate x]\n  \"<indexed seq>\")\n\n(defmethod inspect* cljs.core/PersistentArrayMapSeq [truncate x]\n  \"<map seq>\")\n\n(defmethod inspect* cljs.core/NodeSeq [truncate x]\n  \"<map seq>\")\n\n(defmethod inspect* cljs.core/Cons [truncate x] \"<cons>\")\n\n(defmethod inspect* cljs.core/LazySeq [truncate x] \"<lazy seq>\")\n\n(defmethod inspect* :nil [_ _] \"nil\")\n\n(defmethod inspect* :list [truncate col]\n  (inspect*-col truncate col \\( \\)))\n\n(defmethod inspect* :map [truncate m]\n  (let [len (count m)\n        n-shown (if truncate 0 len)\n        contents (apply concat (take n-shown m))\n        suffix (if (> len n-shown) \"...}\" \\})]\n    (inspect*-col truncate contents \\{ suffix)))\n\n(defmethod inspect* :set [truncate col]\n  (inspect*-col truncate col \"#{\" \\}))\n\n(defmethod inspect* :vector [truncate col]\n  (inspect*-col truncate col \\[ \\]))\n\n(defmethod inspect* :default [truncate x]\n  (pr-str (type x)))\n\n(defn inspect\n  \"Return a string description of the value supplied.\n   May be the a string version of the value itself (e.g. \\\"true\\\")\n   or it may be a description (e.g. \\\"an instance of Foo\\\").\n   If truncate is true then return a very terse version of\n   the inspection.\"\n  ([x] (inspect* false x))\n  ([truncate x] (inspect* truncate x)))\n"]}