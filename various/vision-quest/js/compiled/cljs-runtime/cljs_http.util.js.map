{"version":3,"file":"cljs_http.util.js","sources":["cljs_http/util.cljs"],"mappings":"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","names":["cljs-http.util/parse-headers","headers","s","clojure.string/blank?","js/JSON.parse","v","p1__26145#","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","clojure.string/lower-case","k","cljs-http.util/basic-auth","cljs-http.util/json-decode","scheme","server-name","server-port","uri","query-string","vec__26146","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p2__26144#","clojure.string.split.cljs$core$IFn$_invoke$arity$2","G__26143","x","type","opts","cljs-http.util/user-agent","credentials","rdr","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","or__3936__auto__","goog/Uri","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/capitalize","wrtr","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/map?","cljs.core/name","goog.userAgent/getUserAgentString","cljs-http.util/android?","cljs-http.util/camelize","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","cognitect.transit/read","vec__26137","username","password","cljs-http.util/json-encode","cljs-http.util/transit-decode","cljs-http.util/build-headers","cognitect.transit/write","js/JSON.stringify","cljs.core/clj->js","cljs.core/re-matches","cljs-http.util/transit-encode","no.en.core/base64-encode","p__26140","map__26141","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs-http.util/build-url","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/vals","m","cljs.core/zipmap","cljs.core/keys"],"sourcesContent":["(ns cljs-http.util\n  (:import goog.Uri)\n  (:require [clojure.string :refer [blank? capitalize join split lower-case]]\n            [cognitect.transit :as t]\n            [goog.userAgent :as agent]\n            [no.en.core :refer [base64-encode]]))\n\n(defn basic-auth\n  \"Returns the value of the HTTP basic authentication header for\n  `credentials`.\"\n  [credentials]\n  (if credentials\n    (let [[username password]\n          (if (map? credentials)\n            (map credentials [:username :password])\n            credentials)]\n      (str \"Basic \" (base64-encode (str username \":\" password))))))\n\n(defn build-url\n  \"Build the url from the request map.\"\n  [{:keys [scheme server-name server-port uri query-string]}]\n  (str (doto (Uri.)\n         (.setScheme (name (or scheme :http)))\n         (.setDomain server-name)\n         (.setPort server-port)\n         (.setPath uri)\n         (.setQuery query-string true))))\n\n(defn camelize\n  \"Returns dash separated string `s` in camel case.\"\n  [s]\n  (->> (split (str s) #\"-\")\n       (map capitalize)\n       (join \"-\")))\n\n(defn build-headers\n  \"Build the headers from the map.\"\n  [m] (clj->js (zipmap (map camelize (keys m)) (vals m))))\n\n(defn user-agent\n  \"Returns the user agent.\"\n  [] (agent/getUserAgentString))\n\n(defn android?\n  \"Returns true if the user agent is an Android client.\"\n  [] (re-matches #\"(?i).*android.*\" (user-agent)))\n\n(defn transit-decode\n  \"Transit decode an object from `s`.\"\n  [s type opts]\n  (let [rdr (t/reader type opts)]\n    (t/read rdr s)))\n\n(defn transit-encode\n  \"Transit encode `x` into a String.\"\n  [x type opts]\n  (let [wrtr (t/writer type opts)]\n    (t/write wrtr x)))\n\n(defn json-decode\n  \"JSON decode an object from `s`.\"\n  [s]\n  (let [v (if-not (clojure.string/blank? s) (js/JSON.parse s))]\n    (when (some? v)\n      (js->clj v :keywordize-keys true))))\n\n(defn json-encode\n  \"JSON encode `x` into a String.\"\n  [x] (js/JSON.stringify (clj->js x)))\n\n(defn parse-headers [headers]\n  (reduce\n   #(let [[k v] (split %2 #\":\\s+\")]\n      (if (or (blank? k) (blank? v))\n        %1 (assoc %1 (lower-case k) v)))\n   {} (split (or headers \"\") #\"(\\n)|(\\r)|(\\r\\n)|(\\n\\r)\")))\n"]}