{"version":3,"file":"shadow.cljs.devtools.client.env.js","sources":["shadow/cljs/devtools/client/env.cljs"],"mappings":";;;;;;AASA,GAAA,QAAA0H,mCAAAC,wCAAAC,iDAAAC,wDAAAC,4DAAAkB;AAAA;AAAA,AAAA,AAAS3I,6CAAW,AAAC4I;;AAErB,AAAA,AAAA;AAAA;AAAA,AAAA5G,YAAA,0CAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,2CAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,gDAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,oDAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,2CAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,0CAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,8CAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,8CAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,8CAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,oDAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,+CAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,sCAAA;AAEA,AAAA,AAAA;AAAA;AAAA,AAAAA,YAAA,kDAAA;AAEA,kDAAA,lDAAM4C;oBAEF,iBAAArC,oBAAKC,zDADP,AADF;AAEI,AAAA,GAAAD;AAAA,IAAAA,wBACKsD;AADL,AAAA,oBAAAtD;AAAA,IAAAA,wBAEK+D;AAFL,AAAA,oBAAA/D;AAGK,OAAC2B,cAAIsF;;AAHVjH;;;AAAAA;;;AAAAA;;;AAIA4E;;GAEA,AAACjD,cAAIhB,jBAPP;AAQEA;;AARF,AAAA;;;;;AAaF,+CAAA,/CAAMgF;AAAN,AACE,GAAI,AAAChE,cAAI6E;AACPA;;AACA,QAAA,qGAAA,qGAAA,vJAAY,uCAAA,AAAA,IAAA,zCAAMpE,kGAAe,AAACC,mGAAqBC;;;AAE3D,kDAAA,lDAAMhF;AAEA,6EAAA,QAAA,9EAAC+B,PAFP,8BACM,AAACsG;;AAGP,yCAAA,zCAAMnG,0FAAQ3B;AAAd,AAAA,GACS,yBAAAgH,xBAAUhH;AADnB;AAAA,AAAA,MAAA,KAAA0B,MAAA;;;oDAEO,2YAA8E1B,9RAA9CN,mLAAyBE,pVAA9D,uGAAA,oGAAA,yFAAA,4FAAA,gDAA6E,rLAA3BD,qLAA4BM,5XAAxER;;AAER,kDAAA,lDAAM+H,4GAAiBC;AACrB,uGAAA,sGAAA,yFAAA,lPAAK,AAAChI,+GAAiCC,0FAAaC,yFAAYC,tVADlE;;AAGA,4CAAA,5CAAMsJ;AACJ,oGAAA,uGAAA,yFAAA,hPAAK,AAACpB,6GAA+BpI,0FAAaC,yFAAYC,pVADhE;;AAGA,AAAKC,kGAED0B,iBACA,sDAAiB4D,zHAFnB,EAAA,EAAQgE;AAGJ,IAAAjJ,mBAAA,KAAAC,5BADF;AACE,AAAA,IAAAC,uCAAAC;IAAAC,kCAAAC;AAAA,AAAA,AAAAF,sCAAA;;AAAA,AAAAE,iCAAA;kBAAAC;AAAA,AAAA,OAAAN,wBAAAM;;;;AAAA,IAAA,AACE,AAAC0E,iDAAOC;UADV,AAAA,AAAA5E,iCAAAD;;AAAA,AAAAD,sCAAAD;;AAAA,oDAAAF;;AAIN,6CAAA,7CAAM0I,kGAAY7G;iPAIJ,AAAWA,jPACnB,IAAAG,WAAA,2CAAA,qDAAA,2EAAA,1LALN;AAKM,AAAA,oBACE,iBAAA,jBAAiBH;AACjB,qDAAAG,SAAA,vDAACL,8GAAa,AAASE;;AAFzBG;;;AAIN,4CAAA,5CAAM+G,gGAAWjD,UAAUf;AACzB,IAAA,AACE,aAAA,2CAAA,qDAAA,zGAAMnD,RAFV;IAGUiE,MAAI,CAACC,0CAAAA,4CAAAA;AACT,AAAMN,oBAAGhB,pBAFX;;AAGE,AAAMA,oBAAGC;;AACT,AAAMA,oBAAGoB;;AAET,IAAA,AAEE,4DAAA,rDAAClE,8CAAMC,6DACE,CAACjC,8EAAAA,mFAAAA,PAAckG,+DAAAA;gBAH1B,QAAAvC,JAIkBzB;AAJlB,AAKI,YAAA,ZAAC+E,wCAA2C/E,EAAEgE;;AAC9C,4DAAA,uDAAA,5GAAClE,8CAAMC;qBACGC,JAdlB,QAAAM;AAAA,AAeI,AAAMwF,oBAAG9F;;AACT,QAACkD,2CAAAA,8CAAAA,LAAWlD,0BAAAA;;AAOlB,GAAA,QAAAkF,mCAAAC,wCAAAC,iDAAAC,wDAAAC,4DAAAC;AAAA;AAAA,AAAA,AAAS/D,qDAAmB,6CAAA,7CAACgE;;AAE7B,sDAAA,tDAAMlC,oHAAgBC;AAGpB,IAAM9F,oBAAkBe,xBAH1B;IAIQoF,wBAAsBC;AAE1B,AAACtC,sBAAOC,tBAHV,yEAII;;AACE,AAAChE,6BAAcC,7BADjB;;AAEE,OAACoB,iCAAkB+E;;;;6BAGrB,7BADF,AAACpG;;8FACsBuB;AAArB,AACE,IAAAkI,iBAAA,2CAAA,qDAAA,0DAAA,sDAA+B,kDAAA,lDAACF,qDAAYhI;AAA5C,AAAA,6EAAAkI,mCAAAA,/GAAC1D,uCAAAA,uDAAAA;;AACD,oBAAM9F;AACJ,OAACqB,8CAAMrB,kBAAkBsB,vEAD3B;;AAAA;;;;IAFmBA;;;;EAAAA;;+FAAAA;;;IAAAA;qFAAAA;;;;;;;;AAKvB,OAACF,iCACC;;kGAAyBE;AAAzB,AACE,IAAA+H,iBAAA,2CAAA,qDAAA,2DAAA,sDAA+B,kDAAA,lDAACC,qDAAYhI;AAA5C,AAAA,6EAAA+H,mCAAAA,/GAACvD,uCAAAA,uDAAAA;;AACD,oBAAMK;AACJ,OAAC9E,8CAAM8E,sBAAsB7E,3EAD/B;;AAAA;;;;IAFuBA;;;;EAAAA;;mGAAAA;;;IAAAA;yFAAAA;;;;;;;;AAK/B,wDAAA,xDAAMyE;AACJ,IAAAT,qBAAA,AAAAC,gBAAcxB,zCADhB;AACE,AAAA,oBAAAuB;AAAA,AAAA,QAAAA,JAAWE;AAAX,AACE,CAACA,kCAAAA,oCAAAA;;AACD,gFAAA,zEAAC1B,sBAAOC;;AAFV;;;AAIF,iDAAA,jDAAMqB,0GAAgB5B,KAAK6B;AAA3B,AACE,IAAAuD,0CAAUC;uDACA,vDADV,AAAA,AAAUA;kBACK5E,IAAIC;mKACUD,IAAIC,vKADvB,AAAA,0FAAA;;;;QAGN,IAAMzC,MAAI,AAAC8G,4DAAmB/E,9EAJlC,IAAA,AAGE,IAAA;AACE,AACE,QAAC6B,wCAAAA,6CAAAA,PAAQ5D,yBAAAA;oBACKc,JAHlB,QAAA0G;AAII,aAAA,bAAC1F,iDAAoDC,KAAKjB,tDAJ9D;;AAKI,MAAOA;WARb,AAAA,uDAAAqG,vDAAUC;;AAUZ,+CAAA,uDAAAL,SAAAC,/GAAM7G;AAAN,AAAA,IAAA8G,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1F,gCAAA,AAAA0F,+BAAA,KAAA,OAAA,QAAA,AAAArH,8CAAA4B,mBAAAyF,YAAAA;qBAAA,AAAAxF,4CAAAwF,eAAA,5EAA4B9C;qBAA5B,AAAA1C,4CAAAwF,eAAA,5EAA2CzH;eAA3C,AAAAiC,4CAAAwF,eAAA,tEAA0DpC;IAA1DqC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA3F,gCAAA,AAAA2F,+BAAA,KAAA,OAAA,QAAA,AAAAtH,8CAAA4B,mBAAA0F,YAAAA;aAAA,AAAAzF,4CAAAyF,eAAA,pEAA6EzH;aAA7E,AAAAgC,4CAAAyF,eAAA,pEAAoFR;YAApF,AAAAjF,4CAAAyF,eAAA,nEAA2FhC;AACzF,AADF;kBACO9E;AAAL,AACE,IAAA,AACE,IAAMY,SAAO,AAACyF,qBAAwBC,OAAOC;GAEzC,WAAA,VAAM3F,JADR,AADF;AAGI,AAAI,oBAAMmD;AACJ,CAACA,+CAAAA,uDAAAA,VAAe1E,mCAAAA,hIADlB;;AAAA;;AAEA,QAACW,qCAAAA,uCAAAA;;AAJP,oBAME8E;AACA,AAAI,oBAAM1F;AACJ,CAACA,+CAAAA,uDAAAA,VAAeC,mCAAAA,hIADlB;;AAAA;;AAEA,QAACuB,uCAAAA,6CAAAA,RAAOZ,yBAAAA;;AATd,AAYE,AAAI,oBAAMyE;AAAN,AACE,CAACA,yCAAAA,iDAAAA,VAASpF,6BAAAA;;AADZ;;AAEA,CAACuB,uCAAAA,yCAAAA;;AACD,QAACZ,qCAAAA,uCAAAA;;;;gBAjBX,SAAAC,LAkBkBuE;AAlBlB,AAmBI,aAAA,bAAC9C,qDAAwD,6CAAKrC,kBAAQmF;;AACtE,QAACxE,qCAAAA,uCAAAA;;;;AAET,qDAAA,wEAAAsC,7HAAMO,kHAAeC;AAArB,AAAA,IAAAP,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;WAAAE,PAAiCX;sBAAjCS,lBAAwCO;AAAxC,AACE,oBAAMhB;AACJ,IAAA,AACE,IAAAsF,WAAA,nBAFJ;;AAEI,AAAO,QAACxE,mFAAAA,+GAAAA,9BAAcC,2FAAAA,hFAAWC,2FAAAA;;;AAAjC,AAAA,gFAAAsE,2BAAAA,nGAACtF,qCAAAA,+CAAAA;gBADH,QAAA6C,JAEkBlE;AACd,QAACoC,2CAAAA,mEAAAA,1BAAWpC,+CAAAA,7CAAEqB,+CAAAA,1CAAKgB,+CAAAA,lJAHvB;;AADF;;;AAMF,AAAA;;;;;+CAAA,uDAAAiF,tGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA7H,MAAA,CAAA,8DAAA,AAAA;;;;;wFAIIT,IAAIoD,5FAJR,AAAA,6EAAA,7EAAMkF;AAKH,OAAC5I,4FAGC,jBAFAM,lFANL,sFAOKoD;AACA,AAAA;;;;wFACDpD,IAAIoD,aAAaC,zGATrB,AAAA,6EAAA,7EAAMiF;+GAcD,WAAKpG,MAAMC,KAAKC,rIAJlB,OAACmC,+EAECnB,aACAC,jBAFArD,lFAXL;AAcK,AACE,oBAAA,bAAC8B,gCAAmCI;;;;iGACTkB,aAAaC,YAAYH,1HAhB3D,AAAA,6EAAA,WAAAqF,xFAAMD;AAAN,AAAA,IAAAE,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAjH,gCAAA,AAAAiH,+BAAA,KAAA,OAAA,QAAA,AAAA5I,8CAAA4B,mBAAAgH,YAAAA;IAgB6BxI,MAhB7BwI;IAgBYzI,cAhBZ,AAAA0B,4CAAA+G,eAAA;8DA2Ba,AAACtI,wKALU,AAACM,3HACZ,AAACO,6IAFU,4CAAA,5CAACkB,xPAJtB,IAAMoF,oJAGI,6CAAA,7CAACS,vIAQD,AAAC/G,jBA5Bd;kBAqBwBiB;AAAA,AAAM,wDAAAA,jDAAC7B,6CAAaH;;mHAEzB,lHAHK,AAAA,kGAAcD;kBAGdK;AAAL,AACE,CAACgD,6CAAAA,+CAAAA;;AACD,QAAChD,qCAAAA,uCAAAA;;EAEFN,AAAD,4CAAA;kBAAAG;oDAAoBD,pDAAd,wDAAAC,xDAAN,OAAOE;;kGAAkCJ,hGAAb,AAAA,8GAC5B;kBAAKK;AAAL,AACE,CAACiD,4CAAAA,8CAAAA;;AACD,QAACjD,qCAAAA,uCAAAA;;;AAEjB,OAAC6C,mDAAcC,WAAWmE,rEAf5B;;;AAjBH,AAAA,uEAAA,vEAAMiB;;AAkCN,kDAAA,0DAAAjH,5GAAMK,AAlCN;AAkCA,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAA1B,8CAAA4B,mBAAAF,YAAAA;UAAAA,NAA4CM;WAA5C,AAAAH,4CAAAH,eAAA,lEAA+BxC;SAA/B,AAAA2C,4CAAAH,eAAA,hEAAoCK;AAClC,GAAM,6CAAA,7CAAC9C,kGAAQC,rGADjB;AACE,AACE,IAAAqG,aAAA,AAAAtC,cAAU+C;IAAVR,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,QAAA,AAAAD,kDAAAE,tDAAQvB;AAAR,AAAA,AACE,CAACA,kCAAAA,sCAAAA,NAAEpC,kBAAAA;;AADL;AAAA,eAAAwD;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAzB,qBAAA,AAAAhB,cAAAsC;AAAA,AAAA,GAAAtB;AAAA,AAAA,IAAAsB,iBAAAtB;AAAA,AAAA,GAAA,AAAA0B,6BAAAJ;AAAA,IAAAK,kBAAA,AAAAC,sBAAAN;AAAA,AAAA,eAAA,AAAAO,qBAAAP;eAAAK;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,QAAA,AAAAzC,gBAAAoC,pBAAQpB;AAAR,AAAA,AACE,CAACA,kCAAAA,sCAAAA,NAAEpC,kBAAAA;;AADL;AAAA,eAAA,AAAAqB,eAAAmC;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AADF","names":["cljs.core/set-print-fn!","original-print-fn","shadow.cljs.devtools.client.env/get-ws-url-base","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.cljs.devtools.client.env/runtime-id","shadow.cljs.devtools.client.env/repl-print-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","type","runtime-type","cljs.core/name","sb__4449__auto__","goog.string/StringBuffer","*print-newline*32419","cljs.core/*print-newline*","*print-fn*32420","cljs.core/*print-fn*","x__4450__auto__","log-call-async","fn-sym","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","cljs.core/set-print-err-fn!","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","args","cljs.core.map.cljs$core$IFn$_invoke$arity$1","reload-info","msg","p1__32544#","cljs.core.into.cljs$core$IFn$_invoke$arity$3","shadow.cljs.devtools.client.env/make-task-fn","next","e32523","cljs.core/pr-str","clojure.string/replace","cljs.core/reverse","js/Error","shadow.cljs.devtools.client.env/ws-url","goog/define","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","result","e","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","fn-obj","G__32439","and__3925__auto__","shadow.cljs.devtools.client.env/use-document-host","e32453","p__32566","map__32567","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/before-load-src","ns","src","shadow.cljs.devtools.client.env/server-host","js/console.warn","text","p1__32543#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","error","task","remaining","cljs.core/reset!","shadow.cljs.devtools.client.env/reset-print-fn-ref","e32461","tag","value","p__32535","vec__32536","seq__32537","cljs.core/seq","first__32538","cljs.core/first","cljs.core/next","shadow.cljs.devtools.client.env/do-js-reload*","failure-fn","remaining-tasks","load-code-fn","complete-fn","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/get-server-host","shadow.cljs.devtools.client.env/server-port","cljs.core/*2","cljs.core/*1","shadow.cljs.devtools.client.env/process-ws-msg","handler","temp__5457__auto__","cljs.core/deref","x","repl-error","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","obj","log-missing-fn","shadow.cljs.devtools.client.env/set-print-fns!","msg-fn","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$4","js/goog.global.document","cljs.core/*3","original-print-err-fn","cljs.core/*print-err-fn*","ex","log-call","ret","repl-expr","e32539","js/goog.global.document.location","async","seq__32570","chunk__32571","count__32572","i__32573","cljs.core/chunked-seq?","c__4338__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","js/goog.global.SHADOW_NS_RESET","js/console.log","js/document.location.hostname","cljs.core/Keyword","js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.env","js/shadow.cljs.devtools.client.env.reset-print-fn-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.env/ws-listener-url","client-type","js/goog.getObjectByName","fn-str","js/$CLJS","cljs.core/*e","shadow.cljs.devtools.client.env/get-url-base","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","p__32515","p__32516","map__32517","map__32518","*default-data-reader-fn*32511","cljs.tools.reader/*default-data-reader-fn*","load-tasks","js/shadow.cljs.devtools.client.env.runtime-id","cljs.core/random-uuid","e32512","G__32541","shadow.cljs.devtools.client.env/devtools-url","shadow.cljs.devtools.client.env/repl-error","G__32490","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__32487","shadow.cljs.devtools.client.env/repl-call","shadow.cljs.devtools.client.env/files-url","shadow.cljs.devtools.client.env/repl-pprint","js/goog.global.document.location.hostname","var_args","G__32549","shadow.cljs.devtools.client.env/do-js-reload","p__32553","map__32556"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require\n    [goog.object :as gobj]\n    [clojure.string :as str]\n    [cljs.tools.reader :as reader]\n    [cljs.pprint :refer (pprint)]\n    ))\n\n;; FIXME: make this persistent somehow?\n(defonce runtime-id (random-uuid))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define server-host \"\")\n\n(goog-define server-port 8200)\n\n(goog-define repl-pprint false)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(goog-define ignore-warnings false)\n\n(defn get-server-host []\n  (cond\n    (and use-document-host\n         js/goog.global.document\n         js/goog.global.document.location\n         (seq js/goog.global.document.location.hostname))\n    js/document.location.hostname\n\n    (seq server-host)\n    server-host\n\n    :else\n    \"localhost\"))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-server-host) \":\" server-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [runtime-type]\n  {:pre [(keyword? runtime-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" runtime-id \"/\" (name runtime-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(def repl-print-fn\n  (if-not repl-pprint\n    pr-str\n    (fn repl-pprint [obj]\n      (with-out-str\n        (pprint obj)\n        ))))\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result {:type :repl/result}\n          ret (repl-expr)]\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n\n        (assoc result\n          :value (repl-print-fn ret))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n;; FIXME: this need to become idempotent somehow\n;; but is something sets a print-fn we can't tell if that\n;; will actually call ours. only a problem if the websocket is\n;; reconnected though\n(defonce reset-print-fn-ref (atom nil))\n\n(defn set-print-fns! [msg-fn]\n  ;; cannot capture these before as they may change in between loading this file\n  ;; and running the websocket connect. the user code is loaded after this file\n  (let [original-print-fn cljs.core/*print-fn*\n        original-print-err-fn cljs.core/*print-err-fn*]\n\n    (reset! reset-print-fn-ref\n      (fn reset-print-fns! []\n        (set-print-fn! original-print-fn)\n        (set-print-err-fn! original-print-err-fn)))\n\n    (set-print-fn!\n      (fn repl-print-fn [& args]\n        (msg-fn {:type :repl/out :text (str/join \"\" args)})\n        (when original-print-fn\n          (apply original-print-fn args))))\n\n    (set-print-err-fn!\n      (fn repl-print-err-fn [& args]\n        (msg-fn {:type :repl/err :text (str/join \"\" args)})\n        (when original-print-err-fn\n          (apply original-print-err-fn args))))))\n\n(defn reset-print-fns! []\n  (when-let [x @reset-print-fn-ref]\n    (x)\n    (reset! reset-print-fn-ref nil)))\n\n(defn process-ws-msg [text handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (try\n      (let [msg (reader/read-string text)]\n        (handler msg))\n      (catch :default e\n        (js/console.warn \"failed to parse websocket message\" text e)\n        (throw e)))))\n\n(defn make-task-fn [{:keys [log-missing-fn log-call-async log-call]} {:keys [fn-sym fn-str async]}]\n  (fn [next]\n    (try\n      (let [fn-obj (js/goog.getObjectByName fn-str js/$CLJS)]\n        (cond\n          (nil? fn-obj)\n          (do (when log-missing-fn\n                (log-missing-fn fn-sym))\n              (next))\n\n          async\n          (do (when log-call-async\n                (log-call-async fn-sym))\n              (fn-obj next))\n\n          :else\n          (do (when log-call\n                (log-call fn-sym))\n              (fn-obj)\n              (next))))\n      (catch :default ex\n        (js/console.warn \"error when calling lifecycle function\" (str fn-sym) ex)\n        (next)))))\n\n(defn do-js-reload* [failure-fn [task & remaining-tasks]]\n  (when task\n    (try\n      (task #(do-js-reload* failure-fn remaining-tasks))\n      (catch :default e\n        (failure-fn e task remaining-tasks)))))\n\n(defn do-js-reload\n  \"should pass the :build-complete message and an additional callback\n   which performs the actual loading of the code (sync)\n   will call all before/after callbacks in order\"\n  ([msg load-code-fn]\n   (do-js-reload\n     msg\n     load-code-fn\n     (fn [])))\n  ([msg load-code-fn complete-fn]\n   (do-js-reload\n     msg\n     load-code-fn\n     complete-fn\n     (fn [error task remaining]\n       (js/console.warn \"JS reload failed\" error))))\n  ([{:keys [reload-info] :as msg} load-code-fn complete-fn failure-fn]\n   (let [load-tasks\n         (-> []\n             ;; unload is FILO\n             (into (->> (:before-load reload-info)\n                        (map #(make-task-fn msg %))\n                        (reverse)))\n             (conj (fn [next]\n                     (load-code-fn)\n                     (next)))\n             ;; load is FIFO\n             (into (map #(make-task-fn msg %)) (:after-load reload-info))\n             (conj (fn [next]\n                     (complete-fn)\n                     (next))))]\n\n     (do-js-reload* failure-fn load-tasks))))\n\n(defn before-load-src [{:keys [type ns] :as src}]\n  (when (= :cljs type)\n    (doseq [x js/goog.global.SHADOW_NS_RESET]\n      (x ns))))\n"]}