{"version":3,"file":"free_form.util.js","sources":["free_form/util.cljs"],"mappings":";;AAIA,8BAAA,9BAAME,oEAAQC;AAAd,SACO,iCAAa,6CAAA,7CAACG,qHAAmB,AAACC,/JAAvC,+KAA6CJ,hJAAjCA,tBAANK;;AAER,8BAAA,9BAAMR,oEAAWC;AAAjB,AACE,GAAI,4BAAA,5BAACI,0BAAUJ;AACb,GAAI,4BAAA,5BAACI,0BAAUJ;AACb,MAAO,KAAAS,MAAA;;AACP,uDAAA,qDAAA,rGAACN,8CAAMH,0IAAS,AAAA,kFAAMA;;;AACxBA;;;AAEJ;;;kCAAA,lCAAKQ","names":["free-form.util/key->keys","m","free-form.util/field?","node","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/contains?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/coll?","free-form.util/attributes-index","js/Error"],"sourcesContent":[";;;; Copyright \u00a9 2017 Jos\u00e9 Pablo Fern\u00e1ndez Silva\n\n(ns free-form.util)\n\n(defn field? [node]\n  (and (coll? node) (= :free-form/field (first node))))\n\n(defn key->keys [m]\n  (if (contains? m :key)\n    (if (contains? m :keys)\n      (throw (js/Error. \"key->keys expects a map with :key or :keys, not both\"))\n      (assoc m :keys [(:key m)]))\n    m))\n\n(def attributes-index\n  \"The second element in structure that represents an input is the attributes, as in :type, :key, etc.\"\n  1)\n\n; Not needed yet, but might be needed in the future\n#_(defn- remove-free-form-attribute [node attr-location attr-name]\n    (let [node (update-in node [attributes-index attr-location] dissoc attr-name)]\n      (if (empty? (get-in node [attributes-index attr-location]))\n        (update-in node [attributes-index] dissoc attr-location)\n        node)))\n"]}